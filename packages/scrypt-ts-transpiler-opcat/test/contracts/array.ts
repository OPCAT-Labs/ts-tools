import { method, prop, SmartContract, assert, FixedArray, equals } from '@scrypt-inc/scrypt-ts-btc';

export class ArrayTest extends SmartContract {
  @prop()
  a: FixedArray<bigint, 3>;

  @prop()
  b: FixedArray<FixedArray<bigint, 3>, 2>;

  @prop()
  static readonly CTCS: FixedArray<bigint, 3> = [1n, 2n, 3n];

  @prop()
  static readonly arr256: FixedArray<bigint, 256> = [
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
    1n,
  ];

  constructor(a: FixedArray<bigint, 3>, b: FixedArray<FixedArray<bigint, 3>, 2>) {
    super(a, b);
    this.a = a;
    this.b = b;
  }

  @method()
  public unlock(a: FixedArray<bigint, 3>, b: FixedArray<FixedArray<bigint, 3>, 2>) {
    assert(equals(a, this.a), 'two arrays `a` are not equal');
    assert(equals(b, this.b), 'two arrays `b` are not equal');

    this.a[1] = 111n;
    a[1] = 111n;

    this.b[1][2] = 112n;
    b[1][2] = 112n;

    assert(equals(a, this.a), 'two arrays `a` are not equal');
    assert(equals(b, this.b), 'two arrays `b` are not equal');

    let i = 0n;

    this.a[Number(i)] = 12n;

    i++;

    this.a[Number(i)] = 115n;

    const k = 2;
    this.a[k] = 4n;

    assert(equals(this.a, [12n, 115n, 4n]), '`this.a` != [12n, 115n, 4n]');

    const N = 3;

    for (let i = 0; i < N; i++) {
      this.a[i] = 1n;
    }

    assert(equals(this.a, [1n, 1n, 1n]), '`this.a` != [1n, 1n, 1n]');

    let sum = 0n;
    for (let i = 0; i < N; i++) {
      sum += ArrayTest.CTCS[i];
    }

    assert(equals(ArrayTest.CTCS, [1n, 2n, 3n]), '`ArrayTest.CTCS` != 1n, 2n, 3n]');

    assert(sum == 6n, '`sum` != 6n');

    assert(
      equals(ArrayTest.arr256, [
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
        1n,
      ]),
      'check arr256 failed',
    );
  }
}
