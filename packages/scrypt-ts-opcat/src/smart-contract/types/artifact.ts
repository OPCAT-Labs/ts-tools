/** @ignore */
export const CURRENT_CONTRACT_ARTIFACT_VERSION = 10; // add state type
/** @ignore */
export const SUPPORTED_MINIMUM_VERSION = 8;

/**
 * Represents the ABI (Application Binary Interface) of a smart contract.
 * @category Artifact
 * @property contract - The name or identifier of the contract.
 * @property abi - An array of ABI entities that define the contract's interface.
 */
export interface ABI {
  contract: string;
  abi: Array<ABIEntity>;
  staticAbi: Array<ABIEntity>;
}

/**
 * An Bitcoin Contract Artifact is a collection of files generated during the compilation of a smart contract.
 * It contains all the necessary metadata, code, and interfaces required to deploy, interact with,
 * and verify the contract on the Bitcoin blockchain. Artifacts are generated by `@opcat-labs/cli-opcat`.
 * @category Artifact
 */
export interface Artifact {
  /** version of artifact file */
  version: number;
  /** version of compiler used to produce this file */
  compilerVersion: string;
  /** build type, can be debug or release */
  buildType: string;
  /** name of the contract */
  contract: string;
  /** md5 of the contract source code */
  md5: string;
  /** all stateful properties defined in the contracts */
  stateProps: Array<ParamEntity>;
  /** the type of the `state` property used in the contracts */
  stateType?: string;
  /** all structures defined in the contracts, including dependent contracts */
  structs: Array<StructEntity>;
  /** all library defined in the contracts, including dependent contracts */
  library: Array<LibraryEntity>;
  /** all typealias defined in the contracts, including dependent contracts */
  alias: Array<AliasEntity>;
  /** ABI of the contract: interfaces of its public functions and constructor */
  abi: Array<ABIEntity>;
  /** ABI of the contract: interfaces of its static functions */
  // todo, make staticAbi required
  staticAbi?: Array<ABIEntity>;
  /** locking script of the contract in hex format, including placeholders for constructor parameters */
  hex: string;
  /** relative file uri of the main contract source code file */
  file: string;
}


/**
 * Enum representing the types of ABI (Application Binary Interface) entities.
 * @category Artifact
 * @remarks
 * Used to distinguish between different kinds of smart contract interfaces,
 * such as functions and constructors.
 */
export enum ABIEntityType {
  FUNCTION = 'function',
  CONSTRUCTOR = 'constructor',
}


/**
 * Represents a parameter entity in a smart contract artifact.
 * @category Artifact
 * @property name - The name of the parameter.
 * @property type - The type of the parameter.
 */
export type ParamEntity = {
  name: string;
  type: string;
};

/**
 * Represents an ABI (Application Binary Interface) entity in a smart contract. A JSON array defining how to interact with the contract (e.g., functions, events, parameters).
 *  Used by clients (like dApps) to encode/decode transactions and calls.
 * @category Artifact
 * @property {string} type - The type of the ABI entity (e.g., "function", "event").
 * @property {string} [name] - Optional name of the ABI entity.
 * @property {ParamEntity[]} params - Array of parameter entities for the ABI.
 * @property {number} [index] - Optional index, typically used for event parameters.
 */
export interface ABIEntity {
  type: string;
  name?: string;
  params: Array<ParamEntity>;
  index?: number;
  returnType?: string;
}

/**
 * @ignore
 */
export interface StructEntity {
  name: string;
  params: Array<ParamEntity>;
  genericTypes: Array<string>;
}

/**
 * @ignore
 */
export interface LibraryEntity extends StructEntity {
  properties: Array<ParamEntity>;
  /** the type of the `state` property used in the library */
  stateType?: string;
}

/**
 * @ignore
 */
export interface AliasEntity {
  name: string;
  type: string;
}

/**
 * @ignore
 */
export type ContractEntity = LibraryEntity;

/**
 * @ignore
 */
export interface StaticEntity {
  name: string;
  type: string;
  const: boolean;
  value?: any; // eslint-disable-line @typescript-eslint/no-explicit-any
}
